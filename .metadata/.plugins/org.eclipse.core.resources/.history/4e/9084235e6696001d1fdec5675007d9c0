

import java.net.*;
import java.util.ArrayList;
import java.awt.Toolkit;
import java.io.*;

//public class MultiServerThread extends Thread{
public class MultiServerThread implements Runnable{
	
	//12:21
    public MultiServerThread(Socket socket) { 
		//통신소켓을 닫기 위해서 스레드 생성할 때 생성자 매개변수로 소켓을 받아서 멤버변수에 대입
		this.socket = socket; 
	}
	
	
    Socket socket;
    private MultiServer ms;
    private MultiServerThread mst;
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    
    private String name = null;

	public String getName() {
		return name;
	}

	
	public MultiServerThread(MultiServer ms){
        this.ms = ms;
    }

	private PrintWriter outMsg = null;
	
	private boolean isStop = false;
	
	
    public synchronized void run(){
    	
        try{
            setSocket(ms.getSocket());
            ois = new ObjectInputStream(getSocket().getInputStream());
            oos = new ObjectOutputStream(getSocket().getOutputStream());
            outMsg = new PrintWriter(socket.getOutputStream(), true);
            String message = null;                
            
            while(!isStop){
                message = (String)ois.readObject();
                String[] str = message.split("#"); //구분자로 #사용
                
                if(name == null) {
                	System.out.println(str[0]);
                	name = str[0].trim();
                }
                
                //23:10
                //ms.hash.put(getInputName(), this);
                
                //로그아웃
                if(str[1].equals("exit")){
                    broadCasting(message);
                    isStop = true;
                
                //비속어 필터링 기능
                }else if(str[1].contains("심한욕")) {
                	message = str[0]+"#사용자가 비속어를 입력하였습니다.";
                	broadCasting(message);
                } else if(str[1].equals("notice")) {
                	broadCasting(str[0] + "#notice#" + str[2]);
                	//broadCasting(str[0] + "#notice#" + str[1]);
                
                //강퇴기능
                //(구현시, if(list.indexOf(this)!=0)으로 
                //처음 들어온 사람에게만 강퇴 권한을 주도록 변경) ---> 미구현
                } else if(str[1].equals("out")) {
                	String target = str[2];
                	broadCastingAfterKick(name +"#" +"[알림]"+ str[2] + "님이 강제퇴장하셨습니다.", target);
//                	broadCasting(name +"#" +"[알림]"+ str[2] + "님이 강제퇴장하셨습니다.");
//                	disconnect(str[2]);
//                	MultiServerThread targetThread = null;
//                	for (int i = 0; i < ms.getList().size(); i++) {
//                		MultiServerThread th = ms.getList().get(i);
//            			if(th.getName().equals(str[2])) {
//            				targetThread = th;
//            				break;
//            			}
//            		}
//                	
//                	if (targetThread == null) return;
//                	
//                	targetThread.send(String.format("%s#kick", targetThread.getName()));
                	//ms.disconnect(thread);
                	//ms.hash.remove(str[2]);
                	//System.out.println(ms.hash);
                }
                else{
                	broadCasting(message);
                }
               
            }
            ms.getList().remove(this);
            System.out.println(getSocket().getInetAddress()+ "정상적으로 종료하셨습니다");
            System.out.println("list size : "+ms.getList().size());
        }catch(Exception e){
            ms.getList().remove(this);
            System.out.println(getSocket().getInetAddress()+ "비정상적으로 종료하셨습니다");
            System.out.println("list size : "+ms.getList().size());
        }
    }
    public void broadCasting(String message)throws IOException{
        for(MultiServerThread ct : ms.getList()){
           //Toolkit.getDefaultToolkit().beep(); //채팅이 올라오면 소리 들리도록 
        	ct.send(message);
        }
    }
    
    public void broadCastingAfterKick(String message, String target) throws IOException {
    	for (MultiServerThread ct : ms.getList()) {
//    		System.out.println(ct.getName());
    		if (ct.getName().equals(target)) {
    			ct.send(String.format("%s#kick", target));
    			System.out.println(target);
    			continue;
    		}
    		
    		ct.send(message);
    	}
    }
    
    public void send(String message)throws IOException{
    	oos.writeObject(message);        
    }

	public void setSocket(Socket socket) {
		this.socket = socket;
	}

	public Socket getSocket() {
		return socket;
	}
	
	public void kick() {
		isStop = true;
		System.out.println("Kicked");
	}

    private void disconnect(String disconnectName) throws IOException {
    	MultiServerThread targetThread = null;
    	for (int i = 0; i < ms.getList().size(); i++) {
    		MultiServerThread th = ms.getList().get(i);
			if(th.getName().equals(disconnectName)) {
				targetThread = th;
				break;
			}
		}
    	
    	if (targetThread == null) return;
    	
    	targetThread.send(String.format("%s#kick", targetThread.getName()));
    	
    }
}
